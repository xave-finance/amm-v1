/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CurveInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "assimilator(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "chi()": FunctionFragment;
    "curve()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "derivatives(uint256)": FunctionFragment;
    "excludeDerivative(address)": FunctionFragment;
    "frozen()": FunctionFragment;
    "liquidity()": FunctionFragment;
    "numeraires(uint256)": FunctionFragment;
    "originSwap(address,address,uint256,uint256,uint256)": FunctionFragment;
    "originSwapDiscountCHI(address,address,uint256,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "reserves(uint256)": FunctionFragment;
    "setFrozen(bool)": FunctionFragment;
    "setParams(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "targetSwap(address,address,uint256,uint256,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "viewCurve()": FunctionFragment;
    "viewDeposit(uint256)": FunctionFragment;
    "viewOriginSwap(address,address,uint256)": FunctionFragment;
    "viewTargetSwap(address,address,uint256)": FunctionFragment;
    "viewWithdraw(uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "allowance", values: [string, string]): string;
  encodeFunctionData(functionFragment: "approve", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "assimilator", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "chi", values?: undefined): string;
  encodeFunctionData(functionFragment: "curve", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "derivatives", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "excludeDerivative", values: [string]): string;
  encodeFunctionData(functionFragment: "frozen", values?: undefined): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(functionFragment: "numeraires", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "originSwap",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "originSwapDiscountCHI",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "reserves", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setFrozen", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "targetSwap",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
  encodeFunctionData(functionFragment: "transfer", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "transferFrom", values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
  encodeFunctionData(functionFragment: "viewCurve", values?: undefined): string;
  encodeFunctionData(functionFragment: "viewDeposit", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "viewOriginSwap", values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "viewTargetSwap", values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "viewWithdraw", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "withdraw", values: [BigNumberish, BigNumberish]): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assimilator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "derivatives", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "excludeDerivative", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numeraires", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "originSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "originSwapDiscountCHI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserves", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFrozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "targetSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "viewCurve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "viewDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "viewOriginSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "viewTargetSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "viewWithdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AssetIncluded(address,address,uint256)": EventFragment;
    "AssimilatorIncluded(address,address,address,address)": EventFragment;
    "FrozenSet(bool)": EventFragment;
    "OwnershipTransfered(address,address)": EventFragment;
    "ParametersSet(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "PartitionRedeemed(address,address,uint256)": EventFragment;
    "Trade(address,address,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetIncluded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssimilatorIncluded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FrozenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransfered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartitionRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class Curve extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CurveInterface;

  functions: {
    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { allowance_: BigNumber }>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { allowance_: BigNumber }>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    assimilator(_derivative: string, overrides?: CallOverrides): Promise<[string] & { assimilator_: string }>;

    "assimilator(address)"(
      _derivative: string,
      overrides?: CallOverrides,
    ): Promise<[string] & { assimilator_: string }>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<[BigNumber] & { balance_: BigNumber }>;

    "balanceOf(address)"(_account: string, overrides?: CallOverrides): Promise<[BigNumber] & { balance_: BigNumber }>;

    chi(overrides?: CallOverrides): Promise<[string]>;

    "chi()"(overrides?: CallOverrides): Promise<[string]>;

    curve(
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        alpha: BigNumber;
        beta: BigNumber;
        delta: BigNumber;
        epsilon: BigNumber;
        lambda: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    "curve()"(
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        alpha: BigNumber;
        beta: BigNumber;
        delta: BigNumber;
        epsilon: BigNumber;
        lambda: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    deposit(
      _deposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      _deposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    derivatives(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "derivatives(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    excludeDerivative(
      _derivative: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "excludeDerivative(address)"(
      _derivative: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    frozen(overrides?: CallOverrides): Promise<[boolean]>;

    "frozen()"(overrides?: CallOverrides): Promise<[boolean]>;

    liquidity(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber[]] & { total_: BigNumber; individual_: BigNumber[] }>;

    "liquidity()"(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber[]] & { total_: BigNumber; individual_: BigNumber[] }>;

    numeraires(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "numeraires(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    originSwap(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "originSwap(address,address,uint256,uint256,uint256)"(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    originSwapDiscountCHI(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "originSwapDiscountCHI(address,address,uint256,uint256,uint256)"(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "reserves(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    setFrozen(
      _toFreezeOrNotToFreeze: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setFrozen(bool)"(
      _toFreezeOrNotToFreeze: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setParams(
      _alpha: BigNumberish,
      _beta: BigNumberish,
      _feeAtHalt: BigNumberish,
      _epsilon: BigNumberish,
      _lambda: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "setParams(uint256,uint256,uint256,uint256,uint256)"(
      _alpha: BigNumberish,
      _beta: BigNumberish,
      _feeAtHalt: BigNumberish,
      _epsilon: BigNumberish,
      _lambda: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(_interface: BytesLike, overrides?: CallOverrides): Promise<[boolean] & { supports_: boolean }>;

    "supportsInterface(bytes4)"(
      _interface: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { supports_: boolean }>;

    targetSwap(
      _origin: string,
      _target: string,
      _maxOriginAmount: BigNumberish,
      _targetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "targetSwap(address,address,uint256,uint256,uint256)"(
      _origin: string,
      _target: string,
      _maxOriginAmount: BigNumberish,
      _targetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber] & { totalSupply_: BigNumber }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber] & { totalSupply_: BigNumber }>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    viewCurve(
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        alpha_: BigNumber;
        beta_: BigNumber;
        delta_: BigNumber;
        epsilon_: BigNumber;
        lambda_: BigNumber;
      }
    >;

    "viewCurve()"(
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        alpha_: BigNumber;
        beta_: BigNumber;
        delta_: BigNumber;
        epsilon_: BigNumber;
        lambda_: BigNumber;
      }
    >;

    viewDeposit(_deposit: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber[]]>;

    "viewDeposit(uint256)"(_deposit: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber[]]>;

    viewOriginSwap(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { targetAmount_: BigNumber }>;

    "viewOriginSwap(address,address,uint256)"(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { targetAmount_: BigNumber }>;

    viewTargetSwap(
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { originAmount_: BigNumber }>;

    "viewTargetSwap(address,address,uint256)"(
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { originAmount_: BigNumber }>;

    viewWithdraw(_curvesToBurn: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "viewWithdraw(uint256)"(_curvesToBurn: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    withdraw(
      _curvesToBurn: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      _curvesToBurn: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  allowance(_owner: string, _spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  "allowance(address,address)"(_owner: string, _spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  assimilator(_derivative: string, overrides?: CallOverrides): Promise<string>;

  "assimilator(address)"(_derivative: string, overrides?: CallOverrides): Promise<string>;

  balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  chi(overrides?: CallOverrides): Promise<string>;

  "chi()"(overrides?: CallOverrides): Promise<string>;

  curve(
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      alpha: BigNumber;
      beta: BigNumber;
      delta: BigNumber;
      epsilon: BigNumber;
      lambda: BigNumber;
      totalSupply: BigNumber;
    }
  >;

  "curve()"(
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      alpha: BigNumber;
      beta: BigNumber;
      delta: BigNumber;
      epsilon: BigNumber;
      lambda: BigNumber;
      totalSupply: BigNumber;
    }
  >;

  deposit(
    _deposit: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    _deposit: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  derivatives(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "derivatives(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  excludeDerivative(
    _derivative: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "excludeDerivative(address)"(
    _derivative: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  frozen(overrides?: CallOverrides): Promise<boolean>;

  "frozen()"(overrides?: CallOverrides): Promise<boolean>;

  liquidity(
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber[]] & { total_: BigNumber; individual_: BigNumber[] }>;

  "liquidity()"(
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber[]] & { total_: BigNumber; individual_: BigNumber[] }>;

  numeraires(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "numeraires(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  originSwap(
    _origin: string,
    _target: string,
    _originAmount: BigNumberish,
    _minTargetAmount: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "originSwap(address,address,uint256,uint256,uint256)"(
    _origin: string,
    _target: string,
    _originAmount: BigNumberish,
    _minTargetAmount: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  originSwapDiscountCHI(
    _origin: string,
    _target: string,
    _originAmount: BigNumberish,
    _minTargetAmount: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "originSwapDiscountCHI(address,address,uint256,uint256,uint256)"(
    _origin: string,
    _target: string,
    _originAmount: BigNumberish,
    _minTargetAmount: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "reserves(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setFrozen(
    _toFreezeOrNotToFreeze: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "setFrozen(bool)"(
    _toFreezeOrNotToFreeze: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setParams(
    _alpha: BigNumberish,
    _beta: BigNumberish,
    _feeAtHalt: BigNumberish,
    _epsilon: BigNumberish,
    _lambda: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "setParams(uint256,uint256,uint256,uint256,uint256)"(
    _alpha: BigNumberish,
    _beta: BigNumberish,
    _feeAtHalt: BigNumberish,
    _epsilon: BigNumberish,
    _lambda: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(_interface: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "supportsInterface(bytes4)"(_interface: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  targetSwap(
    _origin: string,
    _target: string,
    _maxOriginAmount: BigNumberish,
    _targetAmount: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "targetSwap(address,address,uint256,uint256,uint256)"(
    _origin: string,
    _target: string,
    _maxOriginAmount: BigNumberish,
    _targetAmount: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  viewCurve(
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      alpha_: BigNumber;
      beta_: BigNumber;
      delta_: BigNumber;
      epsilon_: BigNumber;
      lambda_: BigNumber;
    }
  >;

  "viewCurve()"(
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      alpha_: BigNumber;
      beta_: BigNumber;
      delta_: BigNumber;
      epsilon_: BigNumber;
      lambda_: BigNumber;
    }
  >;

  viewDeposit(_deposit: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber[]]>;

  "viewDeposit(uint256)"(_deposit: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber[]]>;

  viewOriginSwap(
    _origin: string,
    _target: string,
    _originAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  "viewOriginSwap(address,address,uint256)"(
    _origin: string,
    _target: string,
    _originAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  viewTargetSwap(
    _origin: string,
    _target: string,
    _targetAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  "viewTargetSwap(address,address,uint256)"(
    _origin: string,
    _target: string,
    _targetAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  viewWithdraw(_curvesToBurn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

  "viewWithdraw(uint256)"(_curvesToBurn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

  withdraw(
    _curvesToBurn: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    _curvesToBurn: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(_owner: string, _spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    "allowance(address,address)"(_owner: string, _spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(_spender: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "approve(address,uint256)"(_spender: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    assimilator(_derivative: string, overrides?: CallOverrides): Promise<string>;

    "assimilator(address)"(_derivative: string, overrides?: CallOverrides): Promise<string>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    chi(overrides?: CallOverrides): Promise<string>;

    "chi()"(overrides?: CallOverrides): Promise<string>;

    curve(
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        alpha: BigNumber;
        beta: BigNumber;
        delta: BigNumber;
        epsilon: BigNumber;
        lambda: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    "curve()"(
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        alpha: BigNumber;
        beta: BigNumber;
        delta: BigNumber;
        epsilon: BigNumber;
        lambda: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    deposit(
      _deposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber[]]>;

    "deposit(uint256,uint256)"(
      _deposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber[]]>;

    derivatives(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "derivatives(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    excludeDerivative(_derivative: string, overrides?: CallOverrides): Promise<void>;

    "excludeDerivative(address)"(_derivative: string, overrides?: CallOverrides): Promise<void>;

    frozen(overrides?: CallOverrides): Promise<boolean>;

    "frozen()"(overrides?: CallOverrides): Promise<boolean>;

    liquidity(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber[]] & { total_: BigNumber; individual_: BigNumber[] }>;

    "liquidity()"(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber[]] & { total_: BigNumber; individual_: BigNumber[] }>;

    numeraires(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "numeraires(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    originSwap(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "originSwap(address,address,uint256,uint256,uint256)"(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    originSwapDiscountCHI(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "originSwapDiscountCHI(address,address,uint256,uint256,uint256)"(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "reserves(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setFrozen(_toFreezeOrNotToFreeze: boolean, overrides?: CallOverrides): Promise<void>;

    "setFrozen(bool)"(_toFreezeOrNotToFreeze: boolean, overrides?: CallOverrides): Promise<void>;

    setParams(
      _alpha: BigNumberish,
      _beta: BigNumberish,
      _feeAtHalt: BigNumberish,
      _epsilon: BigNumberish,
      _lambda: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    "setParams(uint256,uint256,uint256,uint256,uint256)"(
      _alpha: BigNumberish,
      _beta: BigNumberish,
      _feeAtHalt: BigNumberish,
      _epsilon: BigNumberish,
      _lambda: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(_interface: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "supportsInterface(bytes4)"(_interface: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    targetSwap(
      _origin: string,
      _target: string,
      _maxOriginAmount: BigNumberish,
      _targetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "targetSwap(address,address,uint256,uint256,uint256)"(
      _origin: string,
      _target: string,
      _maxOriginAmount: BigNumberish,
      _targetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(_recipient: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "transfer(address,uint256)"(_recipient: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    "transferOwnership(address)"(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    viewCurve(
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        alpha_: BigNumber;
        beta_: BigNumber;
        delta_: BigNumber;
        epsilon_: BigNumber;
        lambda_: BigNumber;
      }
    >;

    "viewCurve()"(
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        alpha_: BigNumber;
        beta_: BigNumber;
        delta_: BigNumber;
        epsilon_: BigNumber;
        lambda_: BigNumber;
      }
    >;

    viewDeposit(_deposit: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber[]]>;

    "viewDeposit(uint256)"(_deposit: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber[]]>;

    viewOriginSwap(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "viewOriginSwap(address,address,uint256)"(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    viewTargetSwap(
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "viewTargetSwap(address,address,uint256)"(
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    viewWithdraw(_curvesToBurn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

    "viewWithdraw(uint256)"(_curvesToBurn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

    withdraw(_curvesToBurn: BigNumberish, _deadline: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

    "withdraw(uint256,uint256)"(
      _curvesToBurn: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;
  };

  filters: {
    Approval(
      _owner: string | null,
      spender: string | null,
      value: null,
    ): TypedEventFilter<[string, string, BigNumber], { _owner: string; spender: string; value: BigNumber }>;

    AssetIncluded(
      numeraire: string | null,
      reserve: string | null,
      weight: null,
    ): TypedEventFilter<[string, string, BigNumber], { numeraire: string; reserve: string; weight: BigNumber }>;

    AssimilatorIncluded(
      derivative: string | null,
      numeraire: string | null,
      reserve: string | null,
      assimilator: null,
    ): TypedEventFilter<
      [string, string, string, string],
      {
        derivative: string;
        numeraire: string;
        reserve: string;
        assimilator: string;
      }
    >;

    FrozenSet(isFrozen: null): TypedEventFilter<[boolean], { isFrozen: boolean }>;

    OwnershipTransfered(
      previousOwner: string | null,
      newOwner: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    ParametersSet(
      alpha: null,
      beta: null,
      delta: null,
      epsilon: null,
      lambda: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        alpha: BigNumber;
        beta: BigNumber;
        delta: BigNumber;
        epsilon: BigNumber;
        lambda: BigNumber;
      }
    >;

    PartitionRedeemed(
      token: string | null,
      redeemer: string | null,
      value: null,
    ): TypedEventFilter<[string, string, BigNumber], { token: string; redeemer: string; value: BigNumber }>;

    Trade(
      trader: string | null,
      origin: string | null,
      target: string | null,
      originAmount: null,
      targetAmount: null,
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        trader: string;
        origin: string;
        target: string;
        originAmount: BigNumber;
        targetAmount: BigNumber;
      }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null,
    ): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>;
  };

  estimateGas: {
    allowance(_owner: string, _spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    "allowance(address,address)"(_owner: string, _spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    assimilator(_derivative: string, overrides?: CallOverrides): Promise<BigNumber>;

    "assimilator(address)"(_derivative: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    chi(overrides?: CallOverrides): Promise<BigNumber>;

    "chi()"(overrides?: CallOverrides): Promise<BigNumber>;

    curve(overrides?: CallOverrides): Promise<BigNumber>;

    "curve()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _deposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _deposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    derivatives(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "derivatives(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    excludeDerivative(
      _derivative: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "excludeDerivative(address)"(
      _derivative: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    frozen(overrides?: CallOverrides): Promise<BigNumber>;

    "frozen()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

    numeraires(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "numeraires(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    originSwap(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "originSwap(address,address,uint256,uint256,uint256)"(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    originSwapDiscountCHI(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "originSwapDiscountCHI(address,address,uint256,uint256,uint256)"(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "reserves(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setFrozen(
      _toFreezeOrNotToFreeze: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "setFrozen(bool)"(
      _toFreezeOrNotToFreeze: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setParams(
      _alpha: BigNumberish,
      _beta: BigNumberish,
      _feeAtHalt: BigNumberish,
      _epsilon: BigNumberish,
      _lambda: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "setParams(uint256,uint256,uint256,uint256,uint256)"(
      _alpha: BigNumberish,
      _beta: BigNumberish,
      _feeAtHalt: BigNumberish,
      _epsilon: BigNumberish,
      _lambda: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supportsInterface(_interface: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "supportsInterface(bytes4)"(_interface: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    targetSwap(
      _origin: string,
      _target: string,
      _maxOriginAmount: BigNumberish,
      _targetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "targetSwap(address,address,uint256,uint256,uint256)"(
      _origin: string,
      _target: string,
      _maxOriginAmount: BigNumberish,
      _targetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    viewCurve(overrides?: CallOverrides): Promise<BigNumber>;

    "viewCurve()"(overrides?: CallOverrides): Promise<BigNumber>;

    viewDeposit(_deposit: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "viewDeposit(uint256)"(_deposit: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    viewOriginSwap(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "viewOriginSwap(address,address,uint256)"(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    viewTargetSwap(
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "viewTargetSwap(address,address,uint256)"(
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    viewWithdraw(_curvesToBurn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "viewWithdraw(uint256)"(_curvesToBurn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _curvesToBurn: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      _curvesToBurn: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(_owner: string, _spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    assimilator(_derivative: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assimilator(address)"(_derivative: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOf(address)"(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "chi()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "curve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _deposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      _deposit: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    derivatives(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "derivatives(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    excludeDerivative(
      _derivative: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "excludeDerivative(address)"(
      _derivative: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    frozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "frozen()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numeraires(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numeraires(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    originSwap(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "originSwap(address,address,uint256,uint256,uint256)"(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    originSwapDiscountCHI(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "originSwapDiscountCHI(address,address,uint256,uint256,uint256)"(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      _minTargetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserves(uint256)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFrozen(
      _toFreezeOrNotToFreeze: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "setFrozen(bool)"(
      _toFreezeOrNotToFreeze: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setParams(
      _alpha: BigNumberish,
      _beta: BigNumberish,
      _feeAtHalt: BigNumberish,
      _epsilon: BigNumberish,
      _lambda: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "setParams(uint256,uint256,uint256,uint256,uint256)"(
      _alpha: BigNumberish,
      _beta: BigNumberish,
      _feeAtHalt: BigNumberish,
      _epsilon: BigNumberish,
      _lambda: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(_interface: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(_interface: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetSwap(
      _origin: string,
      _target: string,
      _maxOriginAmount: BigNumberish,
      _targetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "targetSwap(address,address,uint256,uint256,uint256)"(
      _origin: string,
      _target: string,
      _maxOriginAmount: BigNumberish,
      _targetAmount: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    viewCurve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "viewCurve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewDeposit(_deposit: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "viewDeposit(uint256)"(_deposit: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewOriginSwap(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "viewOriginSwap(address,address,uint256)"(
      _origin: string,
      _target: string,
      _originAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    viewTargetSwap(
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "viewTargetSwap(address,address,uint256)"(
      _origin: string,
      _target: string,
      _targetAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    viewWithdraw(_curvesToBurn: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "viewWithdraw(uint256)"(_curvesToBurn: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _curvesToBurn: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      _curvesToBurn: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
